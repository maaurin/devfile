# Autogenerated param section. Do not hand edit.
param {
group.0 {
name=Dynamically Reconfigurable Parameters
desc=See the [[dynamic_reconfigure]] package for details on dynamically reconfigurable parameters.
0.name= ~teb_autosize
0.default= True
0.type= bool
0.desc=Enable the automatic resizing of the trajectory during optimization (based on the temporal resolution of the trajectory, recommended) 
1.name= ~dt_ref
1.default= 0.3
1.type= double
1.desc=Temporal resolution of the planned trajectory (usually it is set to the magnitude of the 1/control_rate) Range: 0.01 to 1.0
2.name= ~dt_hysteresis
2.default= 0.1
2.type= double
2.desc=Hysteresis that is utilized for automatic resizing depending on the current temporal resolution (dt): usually 10% of dt_ref Range: 0.002 to 0.5
3.name= ~global_plan_overwrite_orientation
3.default= True
3.type= bool
3.desc=Some global planners are not considering the orientation at local subgoals between start and global goal, therefore determine it automatically 
4.name= ~allow_init_with_backwards_motion
4.default= False
4.type= bool
4.desc=If true, the underlying trajectories might be initialized with backwards motions in case the goal is behind the start within the local costmap (this is only recommended if the robot is equipped with rear sensors) 
5.name= ~max_global_plan_lookahead_dist
5.default= 3.0
5.type= double
5.desc=Specify maximum length (cumulative Euclidean distances) of the subset of the global plan taken into account for optimization [if 0 or negative: disabled; the length is also bounded by the local costmap size] Range: 0.0 to 50.0
6.name= ~force_reinit_new_goal_dist
6.default= 1.0
6.type= double
6.desc=Force the planner to reinitialize the trajectory if a previous goal is updated with a seperation of more than the specified value in meters (skip hot-starting) Range: 0.0 to 10.0
7.name= ~force_reinit_new_goal_angular
7.default= 0.78
7.type= double
7.desc=Force the planner to reinitialize the trajectory if a previous goal is updated with a rotational difference of more than the specified value in radians (skip hot-starting) Range: 0.0 to 4.0
8.name= ~feasibility_check_no_poses
8.default= 5
8.type= int
8.desc=Specify up to which pose on the predicted plan the feasibility should be checked each sampling interval Range: 0 to 50
9.name= ~exact_arc_length
9.default= False
9.type= bool
9.desc=If true, the planner uses the exact arc length in velocity, acceleration and turning rate computations [-> increased cpu time], otherwise the euclidean approximation is used. 
10.name= ~publish_feedback
10.default= False
10.type= bool
10.desc=Publish planner feedback containing the full trajectory and a list of active obstacles (should be enabled only for evaluation or debugging purposes) 
11.name= ~visualize_with_time_as_z_axis_scale
11.default= 0.0
11.type= double
11.desc=If this value is bigger than 0, the trajectory and obstacles are visualized in 3d using the time as the z-axis scaled by this value. Most useful for dynamic obstacles. Range: 0.0 to 1.0
12.name= ~global_plan_viapoint_sep
12.default= -0.1
12.type= double
12.desc=Min. separation between each two consecutive via-points extracted from the global plan [if negative: disabled] Range: -0.1 to 5.0
13.name= ~via_points_ordered
13.default= False
13.type= bool
13.desc=If true, the planner adheres to the order of via-points in the storage container 
14.name= ~max_vel_x
14.default= 0.4
14.type= double
14.desc=Maximum translational velocity of the robot Range: 0.01 to 100.0
15.name= ~max_vel_x_backwards
15.default= 0.2
15.type= double
15.desc=Maximum translational velocity of the robot for driving backwards Range: 0.01 to 100.0
16.name= ~max_vel_theta
16.default= 0.3
16.type= double
16.desc=Maximum angular velocity of the robot Range: 0.01 to 100.0
17.name= ~acc_lim_x
17.default= 0.5
17.type= double
17.desc=Maximum translational acceleration of the robot Range: 0.01 to 100.0
18.name= ~acc_lim_theta
18.default= 0.5
18.type= double
18.desc=Maximum angular acceleration of the robot Range: 0.01 to 100.0
19.name= ~is_footprint_dynamic
19.default= False
19.type= bool
19.desc=If true, updated the footprint before checking trajectory feasibility 
20.name= ~use_proportional_saturation
20.default= False
20.type= bool
20.desc=If true, reduce all twists components (linear x and y, and angular z) proportionally if any exceed its corresponding bounds, instead of saturating each one individually 
21.name= ~transform_tolerance
21.default= 0.5
21.type= double
21.desc=Tolerance when querying the TF Tree for a transformation (seconds) Range: 0.001 to 20.0
22.name= ~min_turning_radius
22.default= 0.0
22.type= double
22.desc=Minimum turning radius of a carlike robot (diff-drive robot: zero) Range: 0.0 to 50.0
23.name= ~wheelbase
23.default= 1.0
23.type= double
23.desc=The distance between the drive shaft and steering axle (only required for a carlike robot with 'cmd_angle_instead_rotvel' enabled); The value might be negative for back-wheeled robots! Range: -10.0 to 10.0
24.name= ~cmd_angle_instead_rotvel
24.default= False
24.type= bool
24.desc=Substitute the rotational velocity in the commanded velocity message by the corresponding steering angle (check 'axles_distance') 
25.name= ~max_vel_y
25.default= 0.0
25.type= double
25.desc=Maximum strafing velocity of the robot (should be zero for non-holonomic robots!) Range: 0.0 to 100.0
26.name= ~acc_lim_y
26.default= 0.5
26.type= double
26.desc=Maximum strafing acceleration of the robot Range: 0.01 to 100.0
27.name= ~xy_goal_tolerance
27.default= 0.2
27.type= double
27.desc=Allowed final euclidean distance to the goal position Range: 0.001 to 10.0
28.name= ~yaw_goal_tolerance
28.default= 0.1
28.type= double
28.desc=Allowed final orientation error to the goal orientation Range: 0.001 to 3.2
29.name= ~free_goal_vel
29.default= False
29.type= bool
29.desc=Allow the robot's velocity to be nonzero for planning purposes (the robot can arrive at the goal with max speed) 
30.name= ~min_obstacle_dist
30.default= 0.5
30.type= double
30.desc=Minimum desired separation from obstacles Range: 0.0 to 10.0
31.name= ~inflation_dist
31.default= 0.6
31.type= double
31.desc=Buffer zone around obstacles with non-zero penalty costs (should be larger than min_obstacle_dist in order to take effect) Range: 0.0 to 15.0
32.name= ~dynamic_obstacle_inflation_dist
32.default= 0.6
32.type= double
32.desc=Buffer zone around predicted locations of dynamic obstacles with non-zero penalty costs (should be larger than min_obstacle_dist in order to take effect) Range: 0.0 to 15.0
33.name= ~include_dynamic_obstacles
33.default= False
33.type= bool
33.desc=Specify whether the movement of dynamic obstacles should be predicted by a constant velocity model (this also changes the homotopy class search). If false, all obstacles are considered to be static. 
34.name= ~include_costmap_obstacles
34.default= True
34.type= bool
34.desc=Specify whether the obstacles in the costmap should be taken into account directly (this is necessary if no seperate clustering and detection is implemented) 
35.name= ~legacy_obstacle_association
35.default= False
35.type= bool
35.desc=If true, the old association strategy is used (for each obstacle, find the nearest TEB pose), otherwise the new one (for each teb pose, find only 'relevant' obstacles). 
36.name= ~obstacle_association_force_inclusion_factor
36.default= 1.5
36.type= double
36.desc=The non-legacy obstacle association technique tries to connect only relevant obstacles with the discretized trajectory during optimization, all obstacles within a specifed distance are forced to be included (as a multiple of min_obstacle_dist), e.g. choose 2.0 in order to consider obstacles within a radius of 2.0*min_obstacle_dist. Range: 0.0 to 100.0
37.name= ~obstacle_association_cutoff_factor
37.default= 5.0
37.type= double
37.desc=See obstacle_association_force_inclusion_factor, but beyond a multiple of [value]*min_obstacle_dist all obstacles are ignored during optimization. obstacle_association_force_inclusion_factor is processed first. Range: 1.0 to 100.0
38.name= ~costmap_obstacles_behind_robot_dist
38.default= 1.5
38.type= double
38.desc=Limit the occupied local costmap obstacles taken into account for planning behind the robot (specify distance in meters) Range: 0.0 to 20.0
39.name= ~obstacle_poses_affected
39.default= 30
39.type= int
39.desc=The obstacle position is attached to the closest pose on the trajectory to reduce computational effort, but take a number of neighbors into account as well Range: 0 to 200
40.name= ~obstacle_proximity_ratio_max_vel
40.default= 1.0
40.type= double
40.desc=Ratio of the maximum velocities used as an upper bound when reducing the speed due to the proximity to static obstacles Range: 0.0 to 1.0
41.name= ~obstacle_proximity_lower_bound
41.default= 0.0
41.type= double
41.desc=Distance to a static obstacle for which the velocity should be lower Range: 0.0 to 10.0
42.name= ~obstacle_proximity_upper_bound
42.default= 0.5
42.type= double
42.desc=Distance to a static obstacle for which the velocity should be higher Range: 0.0 to 10.0
43.name= ~no_inner_iterations
43.default= 5
43.type= int
43.desc=Number of solver iterations called in each outerloop iteration Range: 1 to 100
44.name= ~no_outer_iterations
44.default= 4
44.type= int
44.desc=Each outerloop iteration automatically resizes the trajectory and invokes the internal optimizer with no_inner_iterations Range: 1 to 100
45.name= ~optimization_activate
45.default= True
45.type= bool
45.desc=Activate the optimization 
46.name= ~optimization_verbose
46.default= False
46.type= bool
46.desc=Print verbose information 
47.name= ~penalty_epsilon
47.default= 0.1
47.type= double
47.desc=Add a small safty margin to penalty functions for hard-constraint approximations Range: 0.0 to 1.0
48.name= ~weight_max_vel_x
48.default= 2.0
48.type= double
48.desc=Optimization weight for satisfying the maximum allowed translational velocity Range: 0.0 to 1000.0
49.name= ~weight_max_vel_y
49.default= 2.0
49.type= double
49.desc=Optimization weight for satisfying the maximum allowed strafing velocity (in use only for holonomic robots) Range: 0.0 to 1000.0
50.name= ~weight_max_vel_theta
50.default= 1.0
50.type= double
50.desc=Optimization weight for satisfying the maximum allowed angular velocity Range: 0.0 to 1000.0
51.name= ~weight_acc_lim_x
51.default= 1.0
51.type= double
51.desc=Optimization weight for satisfying the maximum allowed translational acceleration Range: 0.0 to 1000.0
52.name= ~weight_acc_lim_y
52.default= 1.0
52.type= double
52.desc=Optimization weight for satisfying the maximum allowed strafing acceleration (in use only for holonomic robots) Range: 0.0 to 1000.0
53.name= ~weight_acc_lim_theta
53.default= 1.0
53.type= double
53.desc=Optimization weight for satisfying the maximum allowed angular acceleration Range: 0.0 to 1000.0
54.name= ~weight_kinematics_nh
54.default= 1000.0
54.type= double
54.desc=Optimization weight for satisfying the non-holonomic kinematics Range: 0.0 to 10000.0
55.name= ~weight_kinematics_forward_drive
55.default= 1.0
55.type= double
55.desc=Optimization weight for forcing the robot to choose only forward directions (positive transl. velocities, only diffdrive robot) Range: 0.0 to 1000.0
56.name= ~weight_kinematics_turning_radius
56.default= 1.0
56.type= double
56.desc=Optimization weight for enforcing a minimum turning radius (carlike robots) Range: 0.0 to 1000.0
57.name= ~weight_optimaltime
57.default= 1.0
57.type= double
57.desc=Optimization weight for contracting the trajectory w.r.t. transition time Range: 0.0 to 1000.0
58.name= ~weight_shortest_path
58.default= 0.0
58.type= double
58.desc=Optimization weight for contracting the trajectory w.r.t. path length Range: 0.0 to 100.0
59.name= ~weight_obstacle
59.default= 50.0
59.type= double
59.desc=Optimization weight for satisfying a minimum seperation from obstacles Range: 0.0 to 1000.0
60.name= ~weight_inflation
60.default= 0.1
60.type= double
60.desc=Optimization weight for the inflation penalty (should be small) Range: 0.0 to 10.0
61.name= ~weight_dynamic_obstacle
61.default= 50.0
61.type= double
61.desc=Optimization weight for satisfying a minimum seperation from dynamic obstacles Range: 0.0 to 1000.0
62.name= ~weight_dynamic_obstacle_inflation
62.default= 0.1
62.type= double
62.desc=Optimization weight for the inflation penalty of dynamic obstacles (should be small) Range: 0.0 to 10.0
63.name= ~weight_velocity_obstacle_ratio
63.default= 0.0
63.type= double
63.desc=Optimization weight for satisfying a maximum allowed velocity with respect to the distance to a static obstacle Range: 0.0 to 1000.0
64.name= ~weight_viapoint
64.default= 1.0
64.type= double
64.desc=Optimization weight for minimizing the distance to via-points Range: 0.0 to 1000.0
65.name= ~weight_adapt_factor
65.default= 2.0
65.type= double
65.desc=Some special weights (currently 'weight_obstacle') are repeatedly scaled by this factor in each outer TEB iteration (weight_new: weight_old * factor); Increasing weights iteratively instead of setting a huge value a-priori leads to better numerical conditions of the underlying optimization problem. Range: 1.0 to 100.0
66.name= ~obstacle_cost_exponent
66.default= 1.0
66.type= double
66.desc=Exponent for nonlinear obstacle cost (cost = linear_cost * obstacle_cost_exponent). Set to 1 to disable nonlinear cost (default) Range: 0.01 to 100.0
67.name= ~enable_multithreading
67.default= True
67.type= bool
67.desc=Activate multiple threading for planning multiple trajectories in parallel 
68.name= ~max_number_classes
68.default= 5
68.type= int
68.desc=Specify the maximum number of allowed alternative homotopy classes (limits computational effort) Range: 1 to 100
69.name= ~max_number_plans_in_current_class
69.default= 1
69.type= int
69.desc=Max number of trajectories to try that are in the same homotopy class as the current best trajectory (setting this to 2 or more helps avoid local minima). Must be <= max_number_classes Range: 1 to 10
70.name= ~selection_cost_hysteresis
70.default= 1.0
70.type= double
70.desc=Specify how much trajectory cost must a new candidate have w.r.t. a previously selected trajectory in order to be selected (selection if new_cost < old_cost*factor) Range: 0.0 to 2.0
71.name= ~selection_prefer_initial_plan
71.default= 0.95
71.type= double
71.desc=Specify a cost reduction in the interval (0,1) for the trajectory in the equivalence class of the initial plan.) Range: 0.0 to 1.0
72.name= ~selection_obst_cost_scale
72.default= 2.0
72.type= double
72.desc=Extra scaling of obstacle cost terms just for selecting the 'best' candidate (new_obst_cost: obst_cost*factor) Range: 0.0 to 1000.0
73.name= ~selection_viapoint_cost_scale
73.default= 1.0
73.type= double
73.desc=Extra scaling of via-point cost terms just for selecting the 'best' candidate. (new_viapt_cost: viapt_cost*factor) Range: 0.0 to 100.0
74.name= ~selection_alternative_time_cost
74.default= False
74.type= bool
74.desc=If true, time cost is replaced by the total transition time. 
75.name= ~selection_dropping_probability
75.default= 0.0
75.type= double
75.desc=At each planning cycle, TEBs other than the current 'best' one will be randomly dropped with this probability. Prevents becoming 'fixated' on sub-optimal alternative homotopies. Range: 0.0 to 1.0
76.name= ~switching_blocking_period
76.default= 0.0
76.type= double
76.desc=Specify a time duration in seconds that needs to be expired before a switch to new equivalence class is allowed Range: 0.0 to 60.0
77.name= ~roadmap_graph_no_samples
77.default= 15
77.type= int
77.desc=Specify the number of samples generated for creating the roadmap graph, if simple_exploration is turend off Range: 1 to 100
78.name= ~roadmap_graph_area_width
78.default= 5.0
78.type= double
78.desc=Specify the width of the area in which sampled will be generated between start and goal [m] (the height equals the start-goal distance) Range: 0.1 to 20.0
79.name= ~roadmap_graph_area_length_scale
79.default= 1.0
79.type= double
79.desc=The length of the rectangular region is determined by the distance between start and goal. This parameter further scales the distance such that the geometric center remains equal!) Range: 0.5 to 2.0
80.name= ~h_signature_prescaler
80.default= 1.0
80.type= double
80.desc=Scale number of obstacle value in order to allow huge number of obstacles. Do not choose it extremly low, otherwise obstacles cannot be distinguished from each other (0.2<H<=1) Range: 0.2 to 1.0
81.name= ~h_signature_threshold
81.default= 0.1
81.type= double
81.desc=Two h-signuteres are assumed to be equal, if both the difference of real parts and complex parts are below the specified threshold Range: 0.0 to 1.0
82.name= ~obstacle_heading_threshold
82.default= 0.45
82.type= double
82.desc=Specify the value of the normalized scalar product between obstacle heading and goal heading in order to take them (obstacles) into account for exploration) Range: 0.0 to 1.0
83.name= ~viapoints_all_candidates
83.default= True
83.type= bool
83.desc=If true, all trajectories of different topologies are attached to the set of via-points, otherwise only the trajectory sharing the same one as the initial/global plan is attached (no effect in test_optim_node). 
84.name= ~visualize_hc_graph
84.default= False
84.type= bool
84.desc=Visualize the graph that is created for exploring new homotopy classes 
85.name= ~shrink_horizon_backup
85.default= True
85.type= bool
85.desc=Allows the planner to shrink the horizon temporary (50%) in case of automatically detected issues. 
86.name= ~oscillation_recovery
86.default= True
86.type= bool
86.desc=Try to detect and resolve oscillations between multiple solutions in the same equivalence class (robot frequently switches between left/right/forward/backwards). 
87.name= ~divergence_detection_enable
87.default= False
87.type= bool
87.desc=True to enable divergence detection. 
88.name= ~divergence_detection_max_chi_squared
88.default= 10.0
88.type= double
88.desc=Maximum acceptable Mahalanobis distance above which it is assumed that the optimization diverged. Range: 0.0 to 100.0
}
}
# End of autogenerated section. You may edit below.
